apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion project.COMPILE_SDK_VERSION

    defaultConfig {
        applicationId project.SAMPLE_HOST_APP_APPLICATION_ID
        minSdkVersion project.MIN_SDK_VERSION
        targetSdkVersion project.TARGET_SDK_VERSION
        versionCode project.VERSION_CODE
        versionName project.VERSION_NAME

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation project(':constant')

    implementation 'com.tencent.shadow.dynamic:dynamic-manager'
    implementation 'com.tencent.shadow.core:manager'
    implementation 'com.tencent.shadow.dynamic:dynamic-loader'

    compileOnly 'com.tencent.shadow.core:common-debug'
    compileOnly 'com.tencent.shadow.dynamic:dynamic-host-debug'
}

/*afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            def task = project.getTasksByName("check${buildTypeName.capitalize()}Classpath", false).first() as Task
            task.dependsOn gradle.includedBuild('core').task(':common:jarDebugPackage')
            task.dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:jarDebugPackage')
        }
    }
}*/

afterEvaluate {
    android {
        buildTypes.findAll().each { buildType ->
            def buildTypeName = buildType.getName()
            def task = project.getTasksByName("check${buildTypeName.capitalize()}Classpath", false).first() as Task
            task.dependsOn gradle.includedBuild('core').task(':common:jarDebugPackage')
            task.dependsOn gradle.includedBuild('dynamic').task(':dynamic-host:jarDebugPackage')
        }
    }
}
